"""
% Cutout_fft_and_structure_functions - Generate fft and structure functions of cutouts in a given year - pcc
%
% Given the year, this script will cycle through all of the 128x128 cutouts
% for this year and determine the power spectra, the slope of the power
% spectra in a given wavenumber range and the structure functions. These
% quanitites will be determined from the all 128 rows and columns with the
% spectra being ensemble averaged by direction and the slopes determined
% from the ensemble average the structure functions being determined by
% summing over all differences in a given direction. If there missing
% values, nans, on a given line or row, the spectrum for this line or rorw
% will not be included in the ensemble average. The cutouts will be
% extracted from the .hdf file produced by X.
%
% The script will also generate the variance of the SST values in the given
% cutout and save this along with other statistics found in the files
% generated by X.
"""

 
Laptop = 0;

 
YearS = input('Enter the year to be processed: ', 's');

 
Total_Pixels = 128 * 128;
Num_StructFun_Separations = 75;

 
% Generate the Hanning windows. Need to read one field to get the dimensions.

 
Apply_Hanning_Window = 2;

 
Hann_Temp = hann(128);
Hann_Dim_1 = repmat(Hann_Temp,1,128);
Hann_Dim_2 = repmat(Hann_Temp',128,1);

 
% Get the stats - the stuff produced by ULMO for this year.

 
Stats_In = load(['~/Dropbox/ComputerPrograms/Satellite_Model_SST_Processing/AI-SST/Evaluations/R2010_on_' YearS '_95clear_128x128_preproc_std_log_prob.mat']);

 
% Determine the year, month, day, hour and minute of each of the cutouts.

 
[Year_In Month_In Day_In Hour_In Minute_In Second_In] = datevec(Stats_In.Matlab_Time);

 
% Get the metadata from the file containing the 128x128 cutouts for this
% year. This metadata includes the filename and the row and column of the
% cutout.

 
if Laptop
    FI = ['~/Dropbox/ComputerPrograms/Satellite_Model_SST_Processing/AI-SST/Data/MODIS_R2019_' YearS '_95clear_128x128_inpaintT.h5'];
else
    FI = ['/Volumes/Aqua-1/MODIS/uri-ai-sst/OOD/Extractions/MODIS_R2019_' YearS '_95clear_128x128_inpaintT.h5'];
end

 
Metadata = h5read(FI,'/metadata');

 
% Initialize vectors/arrays to be saved. This should speed up the loop a bit.

 
Number_Of_Cutouts = length(Metadata);

 
Cloudiness_64x64 = nan(Number_Of_Cutouts,1);
Coordinates_64x64 = nan(Number_Of_Cutouts,2);
Dataset_Index_64x64 = nan(Number_Of_Cutouts,1);
Latitude_64x64 = nan(Number_Of_Cutouts,1);
Longitude_64x64 = nan(Number_Of_Cutouts,1);
Log_Likelihood_64x64 = nan(Number_Of_Cutouts,1);
Matlab_Time_64x64 = nan(Number_Of_Cutouts,1);
Mean_Temperature_64x64 = nan(Number_Of_Cutouts,1);
if str2num(YearS) ~= 2019
    SST_sigma_64x64 = nan(Number_Of_Cutouts,1);
end
T10_64x64 = nan(Number_Of_Cutouts,1);
T90_64x64 = nan(Number_Of_Cutouts,1);
Tmin_64x64 = nan(Number_Of_Cutouts,1);
Tmax_64x64 = nan(Number_Of_Cutouts,1);

 
Sigma_SST = nan(Number_Of_Cutouts,1);
Mean_SST = nan(Number_Of_Cutouts,1);
Percent_Bad = nan(Number_Of_Cutouts,1);
SST_10 = nan(Number_Of_Cutouts,1);
SST_90 = nan(Number_Of_Cutouts,1);
SST_min = nan(Number_Of_Cutouts,1);
SST_max = nan(Number_Of_Cutouts,1);

 
switch Apply_Hanning_Window

    
    case 0
        Num_Good_Ensemble_Members_AT = nan(Number_Of_Cutouts,1);
        Slope_AT = nan(Number_Of_Cutouts,1);
        Intercept_AT = nan(Number_Of_Cutouts,1);
        StructFun_AT = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);
        NumElements_AT = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);

        
        Num_Good_Ensemble_Members_AS = nan(Number_Of_Cutouts,1);
        Slope_AS = nan(Number_Of_Cutouts,1);
        Intercept_AS = nan(Number_Of_Cutouts,1);
        StructFun_AS = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);
        NumElements_AS = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);

        

        
    case [1]
        Num_Good_Ensemble_Members_AT_Hanning = nan(Number_Of_Cutouts,1);
        Slope_AT_Hanning = nan(Number_Of_Cutouts,1);
        Intercept_AT_Hanning = nan(Number_Of_Cutouts,1);
        StructFun_AT_Hanning = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);
        NumElements_AT_Hanning = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);

        
        Num_Good_Ensemble_Members_AS_Hanning = nan(Number_Of_Cutouts,1);
        Slope_AS_Hanning = nan(Number_Of_Cutouts,1);
        Intercept_AS_Hanning = nan(Number_Of_Cutouts,1);
        StructFun_AS_Hanning = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);
        NumElements_AS_Hanning = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);

        
    case 2
        Num_Good_Ensemble_Members_AT = nan(Number_Of_Cutouts,1);
        Slope_AT = nan(Number_Of_Cutouts,1);
        Intercept_AT = nan(Number_Of_Cutouts,1);
        StructFun_AT = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);
        NumElements_AT = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);

        
        Num_Good_Ensemble_Members_AS = nan(Number_Of_Cutouts,1);
        Slope_AS = nan(Number_Of_Cutouts,1);
        Intercept_AS = nan(Number_Of_Cutouts,1);
        StructFun_AS = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);
        NumElements_AS = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);

        
        Num_Good_Ensemble_Members_AT_Hanning = nan(Number_Of_Cutouts,1);
        Slope_AT_Hanning = nan(Number_Of_Cutouts,1);
        Intercept_AT_Hanning = nan(Number_Of_Cutouts,1);
        StructFun_AT_Hanning = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);
        NumElements_AT_Hanning = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);

        
        Num_Good_Ensemble_Members_AS_Hanning = nan(Number_Of_Cutouts,1);
        Slope_AS_Hanning = nan(Number_Of_Cutouts,1);
        Intercept_AS_Hanning = nan(Number_Of_Cutouts,1);
        StructFun_AS_Hanning = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);
        NumElements_AS_Hanning = nan(Number_Of_Cutouts,Num_StructFun_Separations-1);

        
    otherwise
        disp(['Apply_Hanning_Window=' num2str(Apply_Hanning_Window) '. It must be either 0, 1 or 2.'])
        keyboard
end

 
% Generate the output filename.

 
if Apply_Hanning_Window > 0
    Filename_Out = ['~/Dropbox/ComputerPrograms/Satellite_Model_SST_Processing/AI-SST/Data/PSD_StructFun_Stats/PSD_StructFun_Stats_Hanning_' YearS '.mat'];
else
    Filename_Out = ['~/Dropbox/ComputerPrograms/Satellite_Model_SST_Processing/AI-SST/Data/PSD_StructFun_Stats/PSD_StructFun_Stats_' YearS '.mat'];
end

 
% Now loop over cutouts for this year.

 
Save_Interval = 10000;

 
tic
for iCutout=1:Number_Of_Cutouts

    
    % Save every 10000 cutouts

    
    if rem(iCutout,Save_Interval) == 0
        disp(['Elapsed time for step ' num2str(iCutout) ' is ' num2str(toc,'%10.1f') ' s. Saving cutout informaton at this point then continuing.'])
        save( Filename_Out, '*64x64', '*_In', '*_AT*', '*_AS*', 'SST_m*', 'SST_*0', '*_SST', 'Percent_Bad', 'YearS', 'FI', '-v7.3')
    end

    
    % Get the date and time information for this cutout.

    
    This_Date = [str2num(Metadata{1,iCutout}(12:15)) str2num(Metadata{1,iCutout}(16:17)) ...
        str2num(Metadata{1,iCutout}(18:19)) str2num(Metadata{1,iCutout}(21:22)) ...
        str2num(Metadata{1,iCutout}(23:24))];

    
    % Find the corresponding index for this cutout in the stats info.

    
    nn = find((Year_In == This_Date(1)) & (Month_In == This_Date(2)) & (Day_In == This_Date(3)) & ...
        (Hour_In == This_Date(4)) & (Minute_In == This_Date(5)) & ...
        (Stats_In.Coordinates(:,1) == str2num(Metadata{2,iCutout})) & (Stats_In.Coordinates(:,2) == str2num(Metadata{3,iCutout})));

    
    if length(nn) > 0

        
        % Load stats obtained from the 64x64 field into their own arrays.

        
        Cloudiness_64x64(iCutout) = Stats_In.Cloudiness(nn);
        Coordinates_64x64(iCutout,:) = Stats_In.Coordinates(nn,:);
        Dataset_Index_64x64(iCutout) = Stats_In.Dataset_Index(nn);
        FileNames_64x64{iCutout} = Stats_In.FileNames(nn);
        Latitude_64x64(iCutout) = Stats_In.Latitude(nn);
        Longitude_64x64(iCutout) = Stats_In.Longitude(nn);
        Log_Likelihood_64x64(iCutout) = Stats_In.Log_Likelihood(nn);
        Matlab_Time_64x64(iCutout) = Stats_In.Matlab_Time(nn);
        Mean_Temperature_64x64(iCutout) = Stats_In.Mean_Temperature(nn);
        if str2num(YearS) ~= 2019
            SST_sigma_64x64(iCutout) = Stats_In.SST_sigma(nn);
        end
        T10_64x64(iCutout) = Stats_In.T10(nn);
        T90_64x64(iCutout) = Stats_In.T90(nn);
        Tmax_64x64(iCutout) = Stats_In.Tmax(nn);
        Tmin_64x64(iCutout) = Stats_In.Tmin(nn);

        
        % Get the SST field and its quality for this cutout

        
        SST = h5read(FI,'/fields',[1 1 iCutout], [128 128 1]);
        Quality = h5read(FI,'/masks',[1 1 10], [128 128 1]);

        
        % If there are missing pixels quality = 1 fill these values with median
        % filtered values. Will only fix small regions.

        
        ii = find(Quality==1);
        if ~isempty(ii)
            SST(ii) = -100;
            SST_Medfilt = medfilt2(SST);
            jj = find(SST_Medfilt==0);
            SST_Medfilt(jj) = nan;
            SST(ii) = SST_Medfilt(ii);
            kk = find(SST<-5);
            SST(kk) = nan;
        end

        
        % Get the structure function for 'fixed' SST fields.

        
        [StructFun_AS(iCutout,:), StructDist_AS, NumElements_AS(iCutout,:)] = Fast_Structure_Function( SST, 1, 2, Num_StructFun_Separations);
        [StructFun_AT(iCutout,:), StructDist_AT, NumElements_AT(iCutout,:)] = Fast_Structure_Function( SST, 2, 2, Num_StructFun_Separations);

        
        % Get the psd and its slope for this cutout.

        
        switch Apply_Hanning_Window

            
            case 0
                [PSD_AS(iCutout,:), Wavenumber_AS, Num_Good_Ensemble_Members_AS(iCutout), Slope_AS(iCutout), Intercept_AS(iCutout)] = Fast_fft( SST, 1, 1, 2, [15 90]);
                [PSD_AT(iCutout,:), Wavenumber_AT, Num_Good_Ensemble_Members_AT(iCutout), Slope_AT(iCutout), Intercept_AT(iCutout)] = Fast_fft( SST, 1, 2, 2, [15 90]);

                
            case [1]
                SST_1 = SST .* Hann_Dim_1;
                [PSD_AS_Hanning(iCutout,:), Wavenumber_AS, Num_Good_Ensemble_Members_AS(iCutout), Slope_AS_Hanning(iCutout), Intercept_AS_Hanning(iCutout)] = Fast_fft( SST_1, 1, 1, 2, [15 90]);
                SST_2 = SST .* Hann_Dim_2;
                [PSD_AT_Hanning(iCutout,:), Wavenumber_AT, Num_Good_Ensemble_Members_AT(iCutout), Slope_AT_Hanning(iCutout), Intercept_AT_Hanning(iCutout)] = Fast_fft( SST_2, 1, 2, 2, [15 90]);

                
            case 2
                [PSD_AS(iCutout,:), Wavenumber_AS, Num_Good_Ensemble_Members_AS(iCutout), Slope_AS(iCutout), Intercept_AS(iCutout)] = Fast_fft( SST, 1, 1, 2, [15 90]);
                [PSD_AT(iCutout,:), Wavenumber_AT, Num_Good_Ensemble_Members_AT(iCutout), Slope_AT(iCutout), Intercept_AT(iCutout)] = Fast_fft( SST, 1, 2, 2, [15 90]);

                
                SST_1 = SST .* Hann_Dim_1;
                [PSD_AS_Hanning(iCutout,:), Wavenumber_AS, Num_Good_Ensemble_Members_AS(iCutout), Slope_AS_Hanning(iCutout), Intercept_AS_Hanning(iCutout)] = Fast_fft( SST_1, 1, 1, 2, [15 90]);
                SST_2 = SST .* Hann_Dim_2;
                [PSD_AT_Hanning(iCutout,:), Wavenumber_AT, Num_Good_Ensemble_Members_AT(iCutout), Slope_AT_Hanning(iCutout), Intercept_AT_Hanning(iCutout)] = Fast_fft( SST_2, 1, 2, 2, [15 90]);

                
            otherwise
                disp(['Apply_Hanning_Window=' num2str(Apply_Hanning_Window) '. It must be either 0, 1 or 2.'])
                keyboard
        end

        
        % And the rest of the stats of interest for the 128x128 field.

        
        Sigma_SST(iCutout) = std(SST,0,'all','omitnan');
        Mean_SST(iCutout) = mean(SST,'all','omitnan');

        
        ii = find(isnan(SST)==0);
        SST_Vec = SST(ii);
        SST_Sorted = sort(SST_Vec);

        
        Percent_Bad(iCutout) = 100 * (1 - length(ii) / Total_Pixels);

        
        SST_10(iCutout) = SST_Sorted(floor(length(SST_Vec)*0.1));
        SST_90(iCutout) = SST_Sorted(floor(length(SST_Vec)*0.9));

        
        SST_min(iCutout) = SST_Sorted(1);
        SST_max(iCutout) = SST_Sorted(end);
    end
end

 
save( Filename_Out, '*64x64', '*_In', '*_AT*', '*_AS*', 'SST_m*', 'SST_*0', '*_SST', 'Percent_Bad', 'YearS', 'FI', '-v7.3')