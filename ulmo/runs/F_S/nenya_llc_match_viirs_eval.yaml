# Script to run Nenya on LLC matched to VIIRS 98
# kubectl exec -it test-pod -- /bin/bash
apiVersion: batch/v1
kind: Job
metadata:
  name: xavier-nenya-llc-matched-eval
spec:
  backoffLimit: 0
  template:
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: NotIn
                values:
                  - k8s-chase-ci-01.noc.ucsb.edu
              - key: nvidia.com/gpu.product
                operator: In
                values:
                  - NVIDIA-GeForce-GTX-1080-Ti
      containers:
      - name: container
        image: localhost:30081/profxj/nenya_nvidia:latest  
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "2"   # Using at least 4
            memory: "15Gi"  # Using ~7
            ephemeral-storage: 50Gi
          limits:
            cpu: "5"
            memory: "35Gi"
            ephemeral-storage: 100Gi
            nvidia.com/gpu:  "1"  # See docs to exlude certain types
        command: ["/bin/bash", "-c"]
            #command: ["sh", "-c", "sleep infinity"]
        args:
          - cd ulmo; 
            git fetch;
            git checkout F_S; 
            git pull; 
            python setup.py develop;
            cd ulmo/runs/F_S;
            python ./llc_kin.py 16;
        env:
          - name: "ENDPOINT_URL"
            value: "http://rook-ceph-rgw-nautiluss3.rook"
          - name: "S3_ENDPOINT"
            value: "rook-ceph-rgw-nautiluss3.rook"
        volumeMounts:
          - name: prp-s3-credentials
            mountPath: "/root/.aws/credentials"
            subPath: "credentials"
          - name: ephemeral
            mountPath: "/tmp"
          - name: "dshm"
            mountPath: "/dev/shm"
      nodeSelector:
        nautilus.io/disktype: nvme
      restartPolicy: Never
      volumes:
        # Secrets file for nautilus s3 credentials .aws/credentials and .s3cfg
        - name: prp-s3-credentials
          secret:
            secretName: prp-s3-credentials
        # Shared memory (necessary for Python's multiprocessing.shared_memory module to work)
        - name: dshm
          emptyDir:
            medium: Memory
        # Ephemeral storage
        - name: ephemeral
          emptyDir: {}
